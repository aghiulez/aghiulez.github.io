{"version":3,"sources":["components/Projects.js","components/home.js","components/about.js","components/Contact.js","components/Experience.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Projects","user","id","className","projects","map","project","href","githubUrl","target","key","name","src","website","summary","Home","basics","region","headline","text","url","style","height","width","bgColor","About","console","log","picture","alt","Contact","action","method","htmlFor","type","defaultValue","size","cols","rows","work","company","position","highlights","navbar","to","path","Experience","App","useState","setUser","useEffect","fetch","then","res","json","Navbar","localUser","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.620e358b.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Projects = ({user}) => {\n    return (\n\n\n        <section id=\"projects\">\n        <div className=\"flexbox\">\n            \n            {user.projects.map(project => (\n                <a href={project.githubUrl} target=\"_blank\" key={project.name} > \n                    <div className = \"project\" >\n\n                        <h1 className='projName'> {project.name} </h1>\n                        <img className =\"gif\" src={project.website} className='gif'></img>\n\n                    \n                        \n                        <p>{project.summary}</p>\n                        <div className =\"lang\">\n                            {/* {project.languages.map(language => (\n                                \n                                    <text>{language}</text>\n                    \n                            ))} */}\n                        </div>\n                    </div>\n                </a>\n            ))}\n\n        </div>\n        </section>\n    );\n}\n\n// style={\n//     {\n//         background:   `url(${project.website}) no-repeat`,\n//         backgroundSize: 'contain',\n//         backgroundPosition: 'center center'\n//     }\n//         }/>\n\n\n\nexport default Projects;","import React from 'react';\nimport { SocialIcon } from 'react-social-icons';\nimport ReactTypingEffect from 'react-typing-effect';\n\n\nconst Home = ({user}) => {\n    return (\n        <section id=\"home\">\n        <div className=\"inner\">\n            <h1>Hello, my name is <strong>{user.basics.name}</strong></h1> \n            <p>I am a <strong>{user.basics.region}</strong> based <strong>{user.basics.headline}</strong> with a strong inclination for problem-solving and seeing unique ideas come to life.</p>\n            <ReactTypingEffect\n                text=\"Check out my GitHub and LinkedIn below!\"\n            /> \n            <div className = \"socialLinks\">\n                <SocialIcon url=\"http://github.com/aghiulez\" target=\"_blank\" style={{ height: 75, width: 75 }} bgColor=\"#ffffff\" />\n                <span>   </span>\n                <SocialIcon url=\"http://linkedin.com/in/aramatthew\" target=\"_blank\" style={{ height: 75, width: 75 }} bgColor=\"#5DBCD2\"/>\n            </div>\n            \n        </div>\n        </section>\n    );\n}\n\n\nexport default Home;","import React from 'react';\n\nconst About = ({user}) => {\n    console.log(\"@ about\")\n    return (\n            <section id=\"about\">\n            <div className=\"row\">\n                <img className=\"profile-pic\"  src={user.basics.picture} alt=\"Ara Matthew Profile Pic\" />\n                \n                <div className ='feed'> \n                    <h1>Let me tell you a little something about myself...</h1>\n                    <p> {user.basics.summary} </p>\n                </div> \n            </div>\n            </section>\n           \n        \n    );\n}\n\n\nexport default About;","import React from 'react';\n\n\nconst Contact = () => {\n    const email = 'aghiulezian@gmail.com';\n    return (\n        <section id=\"contact\">\n            <h1 className='title'> Get in touch with me!</h1>\n            <form  className='contactForm' action='' method=\"get\">\n                <div className='prompts'>\n\n                    <div className='labels'>\n                        <label htmlFor=\"contactName\">Name <span className=\"required\"></span></label>\n                        <label htmlFor=\"contactEmail\">Email <span className=\"required\"></span></label>\n                        <label htmlFor=\"contactMessage\">Message <span className=\"required\"></span></label>\n                    </div>\n                    <div className='inputs'>\n                    <input type=\"text\" className='inputs' defaultValue=\"\" size=\"35\" id=\"contactName\" name=\"contactName\" />\n                    <input type=\"text\" className='inputs' defaultValue=\"\" size=\"35\" id=\"contactEmail\" name=\"contactEmail\"/>\n                    <textarea cols=\"50\" rows=\"15\" className='inputs'  id=\"contactMessage\" name=\"contactMessage\"></textarea>\n                    </div>\n\n                    \n\n                </div>\n                <div className=\"submit\">\n                    <button >Submit</button>\n\n                </div>\n\n                \n\n\n\n\n            </form>\n\n\n\n        </section>\n    );\n\n}\n\n\nexport default Contact;","import React from 'react';\n\n\n\n\nconst Projects = ({user}) => {\n\n    let backgroundUrl = 'https://media-exp1.licdn.com/dms/image/C560BAQEjzxdA4RUnWQ/company-logo_200_200/0?e=1591228800&v=beta&t=i7BEuooI00FJhvV-W1lv-fr-COfwaSxqDMNA8_mtNhQ'\n\n    return (\n\n\n        <section id=\"experience\">\n        <div className=\"flexbox\">\n            \n            {user.work.map(work => (\n                \n                <a href={work.website} className=\"link\" target=\"_blank\"  key={work.company}> \n\n                    <h1 className='position'> {work.position} </h1>\n                    <div className = \"project\">\n\n                    <img className =\"gif\" src={work.highlights[0]} className='workImg'></img>\n\n                                        \n                                            \n                    <p>{work.summary}</p>\n\n                        <div className='info'>\n                            {/* <h1> {work.position} </h1> */}\n                            {/* <p>{work.company}</p> */}\n                        </div>\n\n                    </div>\n                </a>\n            ))}\n\n        </div>\n        </section>\n    );\n}\n\n\nexport default Projects;\n\n\n\n","import Projects from './Projects.js';\nimport Home from './home.js';\nimport About from './about.js';\nimport Contact from './Contact.js';\nimport Experience from './Experience.js';\n\n\n\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  // HashRouter as Router1,\n  Switch,\n  Route,\n  Link,\n} from \"react-router-dom\";\n\n\nconst navbar = ({user}) =>  {\n\n  return (\n    <section id=\"navbar\">\n    <Router>\n      <div className='viewPage'>\n        <nav>\n          \n          <div className = \"topnav\">\n            \n            <Link className=\"AraMatthew\" to=\"/\">Ara<span className = 'boldBlue'>Matthew</span></Link>\n          \n\n            {/* <Link className=\"links\" to=\"/contact\">Contact</Link>   */}\n            <Link className=\"links\" to=\"/experience\">Experience</Link>              \n            <Link className=\"links\" to=\"/projects\">Projects</Link>\n            <Link className=\"links\" to=\"/about\">About</Link>\n          </div>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. \n            -----\n             <Route exact path=\"/animals\" component={Animals} />\n            */}\n \n        <div className =\"curr\">\n        \n          <Switch >          \n            <Route path=\"/contact\">\n              <Contact />\n            </Route>\n              \n            \n            <Route path=\"/about\">\n              <About className = \"container\" user = {user} />\n            </Route>\n            <Route path=\"/projects\">\n              <Projects user = {user}/>\n            </Route>\n            <Route path=\"/experience\">\n              <Experience user = {user}/>\n            </Route>\n            <Route path=\"/\">\n              <Home user = {user}/>\n            </Route>\n          </Switch>\n        </div>\n\n      </div>\n    </Router>\n    </section>\n  );\n}\n\n\n\n// make their own components later on.....\n\n\n\n\n\n\n\n\n\n\n\nexport default navbar;\n","import React from 'react';\n\n\n// UNDERSTAND BELOW: \n//we use the useEffect hook to make the request only when the component mounts by using an empty array [] \n//for the “watch” parameter. We store the result with the useState hook and will pass it to our portfolio components \n//which we’ll build in the upcoming sections.\nimport { useState, useEffect } from 'react'; \n\n\n\nimport localUser from './ifilter/myInfo.json';\nimport Navbar from './components/Navbar';\n\n\n\nfunction App() {\n\n  const [user, setUser] = useState(null);  //initial value of user is null \n  useEffect(() => {\n\n    // NOTE: Use your username below\n    fetch('https://gitconnected.com/v1/portfolio/aghiulez') // returns a promise containing the response \n      .then(res => res.json())\n      .then(user => {\n        setUser(user);\n      });\n  }, []); //empty array (as second arg) will only call effect on initial render...\n  \n\n  return (\n    <section id =\"all\">\n\n        <Navbar user={localUser} /* should be {user} later on */ />\n\n    </section>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nReactDOM.render(\n\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root')\n\n\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
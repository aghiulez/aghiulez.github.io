{"version":3,"sources":["components/home.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Home","user","id","className","basics","name","region","headline","text","url","target","style","height","width","bgColor","navbar","to","path","App","useState","setUser","useEffect","fetch","then","res","json","Navbar","localUser","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"43MA0BeA,EArBF,SAAC,GAAY,IAAXC,EAAU,EAAVA,KACX,OACI,6BAASC,GAAG,QACZ,yBAAKC,UAAU,SACX,iDAAsB,gCAASF,EAAKG,OAAOC,OAC3C,qCAAU,gCAASJ,EAAKG,OAAOE,QAA/B,UAAsD,gCAASL,EAAKG,OAAOG,UAA3E,wFACA,kBAAC,IAAD,CACIC,KAAK,4CAET,yBAAKL,UAAY,eACb,kBAAC,aAAD,CAAYM,IAAI,6BAA6BC,OAAO,SAASC,MAAO,CAAEC,OAAQ,GAAIC,MAAO,IAAMC,QAAQ,YACvG,qCACA,kBAAC,aAAD,CAAYL,IAAI,oCAAoCC,OAAO,SAASC,MAAO,CAAEC,OAAQ,GAAIC,MAAO,IAAMC,QAAQ,gB,eCqE/GC,EArEA,SAAC,GAAa,IAAZd,EAAW,EAAXA,KAEf,OACE,6BAASC,GAAG,UACZ,kBAAC,IAAD,KACE,yBAAKC,UAAU,YACb,6BAEE,yBAAKA,UAAY,UAEf,kBAAC,IAAD,CAAMA,UAAU,aAAaa,GAAG,KAAhC,MAAuC,0BAAMb,UAAY,YAAlB,YAGtC,kBAAC,IAAD,CAAMA,UAAU,QAAQa,GAAG,KAA3B,6CAaL,yBAAKb,UAAW,QAEd,kBAAC,IAAD,KAeE,kBAAC,IAAD,CAAOc,KAAK,KACV,kBAAC,EAAD,CAAMhB,KAAQA,WCrBbiB,MAxBf,WAAgB,IAAD,EAEWC,mBAAS,MAFpB,mBAEAC,GAFA,WAcb,OAXAC,qBAAU,WAGRC,MAAM,kDACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAtB,GACJmB,EAAQnB,QAEX,IAID,6BAASC,GAAI,OAET,kBAACwB,EAAD,CAAQzB,KAAM0B,MCrBFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8b4821ff.chunk.js","sourcesContent":["import React from 'react';\nimport { SocialIcon } from 'react-social-icons';\nimport ReactTypingEffect from 'react-typing-effect';\n\n\nconst Home = ({user}) => {\n    return (\n        <section id=\"home\">\n        <div className=\"inner\">\n            <h1>Hello, my name is <strong>{user.basics.name}</strong></h1> \n            <p>I am a <strong>{user.basics.region}</strong> based <strong>{user.basics.headline}</strong> with a strong inclination for problem-solving and seeing unique ideas come to life.</p>\n            <ReactTypingEffect\n                text=\"Check out my GitHub and LinkedIn below!\"\n            /> \n            <div className = \"socialLinks\">\n                <SocialIcon url=\"http://github.com/aghiulez\" target=\"_blank\" style={{ height: 75, width: 75 }} bgColor=\"#ffffff\" />\n                <span>   </span>\n                <SocialIcon url=\"http://linkedin.com/in/aramatthew\" target=\"_blank\" style={{ height: 75, width: 75 }} bgColor=\"#5DBCD2\"/>\n            </div>\n            \n        </div>\n        </section>\n    );\n}\n\n\nexport default Home;","import Projects from './Projects.js';\nimport Home from './home.js';\nimport About from './about.js';\nimport Contact from './Contact.js';\nimport Experience from './Experience.js';\n\n\n\nimport React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n} from \"react-router-dom\";\n\n\nconst navbar = ({user}) =>  {\n\n  return (\n    <section id=\"navbar\">\n    <Router>\n      <div className='viewPage'>\n        <nav>\n          \n          <div className = \"topnav\">\n            \n            <Link className=\"AraMatthew\" to=\"/\">Ara<span className = 'boldBlue'>Matthew</span></Link>\n            {/* <h3 className=\"links\" >  Under</h3> */}\n\n             <Link className=\"links\" to=\"/\">Under Construction... Coming Very Soon!</Link> \n            {/*<Link className=\"links\" to=\"/experience\">Experience</Link>              \n            <Link className=\"links\" to=\"/projects\">Projects</Link>\n            <Link className=\"links\" to=\"/about\">About</Link> */}\n          </div>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. \n            -----\n             <Route exact path=\"/animals\" component={Animals} />\n            */}\n \n        <div className =\"curr\">\n        \n          <Switch >          \n            {/* <Route path=\"/contact\">\n              <Contact />\n            </Route>\n              \n            \n            <Route path=\"/about\">\n              <About className = \"container\" user = {user} />\n            </Route>\n            <Route path=\"/projects\">\n              <Projects user = {user}/>\n            </Route>\n            <Route path=\"/experience\">\n              <Experience user = {user}/>\n            </Route> */}\n            <Route path=\"/\">\n              <Home user = {user}/>\n            </Route>\n          </Switch>\n        </div>\n\n      </div>\n    </Router>\n    </section>\n  );\n}\n\n\n\n// make their own components later on.....\n\n\n\n\n\n\n\n\n\n\n\nexport default navbar;\n","import React from 'react';\n\n\n// UNDERSTAND BELOW: \n//we use the useEffect hook to make the request only when the component mounts by using an empty array [] \n//for the “watch” parameter. We store the result with the useState hook and will pass it to our portfolio components \n//which we’ll build in the upcoming sections.\nimport { useState, useEffect } from 'react'; \n\n\n\nimport localUser from './ifilter/myInfo.json';\nimport Navbar from './components/Navbar';\n\n\n\nfunction App() {\n\n  const [user, setUser] = useState(null);  //initial value of user is null \n  useEffect(() => {\n\n    // NOTE: Use your username below\n    fetch('https://gitconnected.com/v1/portfolio/aghiulez') // returns a promise containing the response \n      .then(res => res.json())\n      .then(user => {\n        setUser(user);\n      });\n  }, []); //empty array (as second arg) will only call effect on initial render...\n  \n\n  return (\n    <section id =\"all\">\n\n        <Navbar user={localUser} /* should be {user} later on */ />\n\n    </section>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
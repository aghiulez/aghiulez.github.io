{"version":3,"sources":["components/Navbar.js","components/Pages/Projects.js","components/Pages/home.js","components/Pages/about.js","components/Pages/Contact.js","components/Pages/Experience.js","components/Page.js","components/Footer.js","components/Active.js","App.js","serviceWorker.js","index.js"],"names":["Page","user","useState","navOpen","setNavOpen","className","to","onClick","id","Projects","projects","map","project","href","githubUrl","target","key","name","src","website","alt","languages","language","libraries","library","summary","Home","basics","region","headline","text","About","console","log","Contact","action","method","htmlFor","type","defaultValue","size","cols","rows","work","company","highlights","position","path","picture","Experience","Footer","url","style","height","width","bgColor","Active","Navbar","App","setUser","useEffect","fetch","then","res","json","localUser","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9576a44d.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport {\n    Link\n} from \"react-router-dom\";\n\nconst Page = ({user}) =>  {\n\n    const [ navOpen, setNavOpen ] = useState(false);\n\n    return (\n       \n        <nav className = {navOpen ? 'active' : ''}>\n\n\n                <div className =\"header\">\n                    <Link className=\"AraMatthew\" to=\"/\">Ara<span className = 'boldBlue'>Matthew</span></Link>\n                    <figure className=\"dropbtn\" onClick={ () => { setNavOpen(!navOpen) } }/>\n                </div>\n\n                <div onClick={ () => { setNavOpen(!navOpen) } } id='links' className = \"links\"> \n                    <Link to=\"/about\">About</Link>\n                    <Link to=\"/projects\">Projects</Link>\n                    <Link to=\"/experience\">Experience</Link>              \n                </div>\n        </nav>\n\n    );\n}\n        \n    \nexport default Page;","import React from 'react';\n\n\nconst Projects = ({user}) => {\n    return (\n\n        \n        <section id=\"projectspage\">\n\n\n\n            <div className='projects'> \n                {user.projects.map(project => (\n                    <a className = 'project' href={project.githubUrl} target=\"_blank\" key={project.name} >\n                            \n                            <img className =\"gif\" src={project.website}  alt='gif of app'/>\n                            <div className = 'information'> \n                                <h1 className='projName'> {project.name} </h1>\n                                    <div className =\"lang\">\n                                        {project.languages.map(language => (\n                                            \n                                                <text><em>{language}</em> </text>\n                                \n                                        ))}\n                                        <div className =\"frames\">\n                                        {project.libraries.map(library => (\n                                            \n                                                <text><em>{library}</em> </text>\n                                \n                                        ))} </div>\n                                    </div>\n                                <p>{project.summary}</p>\n                            </div>\n\n                    </a>\n                \n                ))}\n            </div>\n\n\n        </section>\n    );\n}\n\n\n\n\nexport default Projects;","import React from 'react';\nimport { SocialIcon } from 'react-social-icons';\nimport ReactTypingEffect from 'react-typing-effect';\n\n\nconst Home = ({user}) => {\n    return (\n        <section id=\"home\">\n\n            <h1>Hello, my name is <strong>{user.basics.name}</strong></h1> \n            <p>I am a <strong>{user.basics.region}</strong> based <strong>{user.basics.headline}</strong> with a strong inclination for problem-solving and seeing unique ideas come to life.</p>\n            <ReactTypingEffect\n                text=\"Check out my GitHub and LinkedIn below!\"\n            /> \n            {/* <div className = \"socialLinks\">\n                <SocialIcon url=\"http://github.com/aghiulez\" target=\"_blank\" style={{ height: 75, width: 75 }} bgColor=\"#ffffff\" />\n                <span>   </span>\n                <SocialIcon url=\"http://linkedin.com/in/aramatthew\" target=\"_blank\" style={{ height: 75, width: 75 }} bgColor=\"#5DBCD2\"/>\n            </div> */}\n            \n\n        </section>\n    );\n}\n\n\nexport default Home;","import React from 'react';\n\nconst About = ({user}) => {\n    console.log(\"@ about\")\n    return (\n            <section id=\"about\">\n\n                  {/* <img className=\"profile-pic\"  src={user.basics.picture} alt=\"Ara Matthew Profile Pic\" /> */}\n                \n                <div className ='bio'> \n                    <h1>Let me tell you a little something about myself...</h1>\n                    <p> {user.basics.summary} </p>\n                </div> \n\n            </section>\n           \n        \n    );\n}\n\n\nexport default About;","import React from 'react';\n\n\nconst Contact = () => {\n    const email = 'aghiulezian@gmail.com';\n    return (\n        <section id=\"contact\">\n            <h1 className='title'> Get in touch with me!</h1>\n            <form  className='contactForm' action='' method=\"get\">\n                <div className='prompts'>\n\n                    <div className='labels'>\n                        <label htmlFor=\"contactName\">Name <span className=\"required\"></span></label>\n                        <label htmlFor=\"contactEmail\">Email <span className=\"required\"></span></label>\n                        <label htmlFor=\"contactMessage\">Message <span className=\"required\"></span></label>\n                    </div>\n                    <div className='inputs'>\n                    <input type=\"text\" className='inputs' defaultValue=\"\" size=\"35\" id=\"contactName\" name=\"contactName\" />\n                    <input type=\"text\" className='inputs' defaultValue=\"\" size=\"35\" id=\"contactEmail\" name=\"contactEmail\"/>\n                    <textarea cols=\"50\" rows=\"15\" className='inputs'  id=\"contactMessage\" name=\"contactMessage\"></textarea>\n                    </div>\n\n                    \n\n                </div>\n                <div className=\"submit\">\n                    <button >Submit</button>\n\n                </div>\n\n                \n\n\n\n\n            </form>\n\n\n\n        </section>\n    );\n\n}\n\n\nexport default Contact;","import React from 'react';\n\n\n\n\nconst Projects = ({user}) => {\n\n\n    return (\n\n\n        <section id=\"experiencepage\">\n\n            \n            {user.work.map(work => (\n                \n                <a href={work.website} className=\"link\" target=\"_blank\"  key={work.company}> \n                    <img className =\"gif\" src={work.highlights[0]}  alt=\"logo\"></img> \n\n\n\n                    <div className='info'>\n                        <h1 className='position'> {work.position} </h1>\n                        <p>{work.summary}</p>\n                    </div>\n                </a>\n            ))}\n\n\n        </section>\n    );\n}\n\n\nexport default Projects;\n\n\n\n","import Projects from './Pages/Projects.js';\nimport Home from './Pages/home.js';\nimport About from './Pages/about.js';\nimport Contact from './Pages/Contact.js';\nimport Experience from './Pages/Experience.js';\n\n\n\nimport React from \"react\";\nimport {\n  // HashRouter as Router1,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\n\n\nconst Page = ({user}) =>  {\n\n\n    return (\n      <Switch >          \n        <Route path=\"/contact\">\n          <div className = \"pageSummary\"> \n              <h1>Contact</h1>\n              <p>\n                  contact me\n              </p>\n          </div>\n          <Contact />\n        </Route>\n        <Route path=\"/about\">\n          <div className = \"pageSummary\"> \n            <div className='container'>\n                <img src ={user.basics.picture} alt=\"Ara Matthew Profile Pic\" />\n                <h1>Ara Matthew</h1>\n                <p>\n                Los Angeles based Software Engineer\n                </p>\n            </div>\n          </div>\n          <About className = \"container\" user = {user} />\n        </Route>\n        <Route path=\"/projects\">\n          <div className = \"pageSummary\"> \n              <div className='container'>\n                <h1>Projects</h1>\n                <p>\n                </p>\n              </div>\n          </div>\n          <Projects user = {user}/>\n        </Route>\n\n        <Route path=\"/experience\">\n          <div className = \"pageSummary\">\n            <div className='container'> \n              <h1>Experience</h1>\n              <p>\n              </p>\n            </div>\n          </div>\n          <Experience user = {user}/>\n        </Route>\n        <Route path=\"/\">\n          <Home user = {user}/>\n        </Route>\n\n      </Switch>\n\n\n    )\n}\n\nexport default Page;","import React from 'react';\nimport { SocialIcon } from 'react-social-icons';\n\nconst Footer = () => (\n    <footer className=\"footer\">\n      <p>@ 2020 Ara Matthew.</p>\n      <div className = \"socialLinks\">\n                <SocialIcon url=\"http://github.com/aghiulez\" target=\"_blank\" style={{ height: 30, width: 30 }} bgColor=\"#ffffff\" />\n                <span>   </span>\n                <SocialIcon url=\"http://linkedin.com/in/aramatthew\" target=\"_blank\" style={{ height: 30, width: 30 }} bgColor=\"#ffffff\"/>\n            </div>\n    </footer>\n  );\n\n  export default Footer;","\n\nimport Navbar from './Navbar.js';\nimport Page from './Page.js';\nimport Footer from './Footer'\n\nimport React from \"react\";\nimport {\n  BrowserRouter as Router\n} from \"react-router-dom\";\n\n\nconst Active = ({user}) =>  {\n  return (\n    <Router>\n      <Navbar />\n      <div className =\"curr\">\n        <Page user = {user}/>\n      </div>\n      <Footer />\n    </Router> \n  );\n}\n\n\nexport default Active;\n","import React from 'react';\n\n\n// UNDERSTAND BELOW: \n//we use the useEffect hook to make the request only when the component mounts by using an empty array [] \n//for the “watch” parameter. We store the result with the useState hook and will pass it to our portfolio components \n//which we’ll build in the upcoming sections.\nimport { useState, useEffect } from 'react'; \n\n\n\nimport localUser from './ifilter/myInfo.json';\nimport Page from './components/Active';\n\n\n\nfunction App() {\n\n  const [user, setUser] = useState(null);  //initial value of user is null \n  useEffect(() => {\n\n    // NOTE: Use your username below\n    fetch('https://gitconnected.com/v1/portfolio/aghiulez') // returns a promise containing the response \n      .then(res => res.json())\n      .then(user => {\n        setUser(user);\n      });\n  }, []); //empty array (as second arg) will only call effect on initial render...\n  \n  \n  return (\n    <Page user={localUser}/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\n\n\n\nReactDOM.render(\n\n\n    <App />,\n  \n    document.getElementById('root')\n\n\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}